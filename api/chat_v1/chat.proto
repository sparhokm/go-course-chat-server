syntax = "proto3";

package chat_v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/sparhokm/go-course-ms-chat-server/pkg/chat_v1;chat_v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Chat API"
    version: "1.0.0"
  };

  host: "localhost:8082",
  schemes: HTTP,
  schemes: HTTPS,
  consumes: "application/json",
  produces: "application/json",
};

service ChatV1 {
  rpc Create(CreateIn) returns (CreateOut) {
    option (google.api.http) = {
      post: "/chat/v1"
      body: "*"
    };
  }
  rpc Delete(DeleteIn) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/chat/v1"
    };
  }
  rpc SendMessage(SendMessageIn) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/chat/v1/send"
      body: "*"
    };
  }
}

message CreateIn {
  repeated string usernames = 1 [
    (validate.rules).repeated.min_items = 1,
    (validate.rules).repeated.unique = true,
    (validate.rules).repeated.items.string = {min_len: 5, max_len:50}]
  ;
}

message CreateOut {
  int64 id = 1;
}

message DeleteIn {
  int64 id = 1 [(validate.rules).int64 = {gt:0}];
}

message SendMessageIn {
  string from = 1 [(validate.rules).string = {min_len: 5, max_len:50}];
  string text = 2 [(validate.rules).string = {min_len: 1}];
  google.protobuf.Timestamp timestamp = 3;
}

