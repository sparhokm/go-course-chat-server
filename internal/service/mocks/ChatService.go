// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockChatService is an autogenerated mock type for the ChatService type
type MockChatService struct {
	mock.Mock
}

type MockChatService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChatService) EXPECT() *MockChatService_Expecter {
	return &MockChatService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, userNames
func (_m *MockChatService) Create(ctx context.Context, userNames []string) (int64, error) {
	ret := _m.Called(ctx, userNames)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) (int64, error)); ok {
		return rf(ctx, userNames)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) int64); ok {
		r0 = rf(ctx, userNames)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, userNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChatService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockChatService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - userNames []string
func (_e *MockChatService_Expecter) Create(ctx interface{}, userNames interface{}) *MockChatService_Create_Call {
	return &MockChatService_Create_Call{Call: _e.mock.On("Create", ctx, userNames)}
}

func (_c *MockChatService_Create_Call) Run(run func(ctx context.Context, userNames []string)) *MockChatService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockChatService_Create_Call) Return(_a0 int64, _a1 error) *MockChatService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChatService_Create_Call) RunAndReturn(run func(context.Context, []string) (int64, error)) *MockChatService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockChatService) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChatService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockChatService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockChatService_Expecter) Delete(ctx interface{}, id interface{}) *MockChatService_Delete_Call {
	return &MockChatService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockChatService_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockChatService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockChatService_Delete_Call) Return(_a0 error) *MockChatService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChatService_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *MockChatService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChatService creates a new instance of MockChatService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChatService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChatService {
	mock := &MockChatService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
